// Generated by gencpp from file dmp/DMPPoint.msg
// DO NOT EDIT!


#ifndef DMP_MESSAGE_DMPPOINT_H
#define DMP_MESSAGE_DMPPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dmp
{
template <class ContainerAllocator>
struct DMPPoint_
{
  typedef DMPPoint_<ContainerAllocator> Type;

  DMPPoint_()
    : positions()
    , velocities()  {
    }
  DMPPoint_(const ContainerAllocator& _alloc)
    : positions(_alloc)
    , velocities(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _positions_type;
  _positions_type positions;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _velocities_type;
  _velocities_type velocities;





  typedef boost::shared_ptr< ::dmp::DMPPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dmp::DMPPoint_<ContainerAllocator> const> ConstPtr;

}; // struct DMPPoint_

typedef ::dmp::DMPPoint_<std::allocator<void> > DMPPoint;

typedef boost::shared_ptr< ::dmp::DMPPoint > DMPPointPtr;
typedef boost::shared_ptr< ::dmp::DMPPoint const> DMPPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dmp::DMPPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dmp::DMPPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dmp::DMPPoint_<ContainerAllocator1> & lhs, const ::dmp::DMPPoint_<ContainerAllocator2> & rhs)
{
  return lhs.positions == rhs.positions &&
    lhs.velocities == rhs.velocities;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dmp::DMPPoint_<ContainerAllocator1> & lhs, const ::dmp::DMPPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dmp

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dmp::DMPPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmp::DMPPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dmp::DMPPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dmp::DMPPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::DMPPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::DMPPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dmp::DMPPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f32a98450510f8ae05fae28f45d6e99a";
  }

  static const char* value(const ::dmp::DMPPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf32a98450510f8aeULL;
  static const uint64_t static_value2 = 0x05fae28f45d6e99aULL;
};

template<class ContainerAllocator>
struct DataType< ::dmp::DMPPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dmp/DMPPoint";
  }

  static const char* value(const ::dmp::DMPPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dmp::DMPPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Positions and velocities of DOFs\n"
"#Velocity is only used for movement plans, not for giving demonstrations.\n"
"float64[] positions\n"
"float64[] velocities\n"
"\n"
"\n"
;
  }

  static const char* value(const ::dmp::DMPPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dmp::DMPPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.positions);
      stream.next(m.velocities);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DMPPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dmp::DMPPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dmp::DMPPoint_<ContainerAllocator>& v)
  {
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positions[i]);
    }
    s << indent << "velocities[]" << std::endl;
    for (size_t i = 0; i < v.velocities.size(); ++i)
    {
      s << indent << "  velocities[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocities[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DMP_MESSAGE_DMPPOINT_H
