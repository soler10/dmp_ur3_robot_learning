// Generated by gencpp from file movement_primitives/TPHSMMTrainMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_PRIMITIVES_MESSAGE_TPHSMMTRAINMSG_H
#define MOVEMENT_PRIMITIVES_MESSAGE_TPHSMMTRAINMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_primitives
{
template <class ContainerAllocator>
struct TPHSMMTrainMsg_
{
  typedef TPHSMMTrainMsg_<ContainerAllocator> Type;

  TPHSMMTrainMsg_()
    : tphsmm_name()
    , path_to_data()
    , num_demos(0)
    , num_frames(0)  {
    }
  TPHSMMTrainMsg_(const ContainerAllocator& _alloc)
    : tphsmm_name(_alloc)
    , path_to_data(_alloc)
    , num_demos(0)
    , num_frames(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _tphsmm_name_type;
  _tphsmm_name_type tphsmm_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _path_to_data_type;
  _path_to_data_type path_to_data;

   typedef int8_t _num_demos_type;
  _num_demos_type num_demos;

   typedef int8_t _num_frames_type;
  _num_frames_type num_frames;





  typedef boost::shared_ptr< ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator> const> ConstPtr;

}; // struct TPHSMMTrainMsg_

typedef ::movement_primitives::TPHSMMTrainMsg_<std::allocator<void> > TPHSMMTrainMsg;

typedef boost::shared_ptr< ::movement_primitives::TPHSMMTrainMsg > TPHSMMTrainMsgPtr;
typedef boost::shared_ptr< ::movement_primitives::TPHSMMTrainMsg const> TPHSMMTrainMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator1> & lhs, const ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator2> & rhs)
{
  return lhs.tphsmm_name == rhs.tphsmm_name &&
    lhs.path_to_data == rhs.path_to_data &&
    lhs.num_demos == rhs.num_demos &&
    lhs.num_frames == rhs.num_frames;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator1> & lhs, const ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_primitives

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4144652d3d9743179c2af47f39a3c3f";
  }

  static const char* value(const ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4144652d3d97431ULL;
  static const uint64_t static_value2 = 0x79c2af47f39a3c3fULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_primitives/TPHSMMTrainMsg";
  }

  static const char* value(const ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string tphsmm_name\n"
"string path_to_data\n"
"int8 num_demos #How many of the demos from path_to_data do you want to use\n"
"int8 num_frames #Number of important frames of reference in the demonstrations\n"
;
  }

  static const char* value(const ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tphsmm_name);
      stream.next(m.path_to_data);
      stream.next(m.num_demos);
      stream.next(m.num_frames);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TPHSMMTrainMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_primitives::TPHSMMTrainMsg_<ContainerAllocator>& v)
  {
    s << indent << "tphsmm_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.tphsmm_name);
    s << indent << "path_to_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.path_to_data);
    s << indent << "num_demos: ";
    Printer<int8_t>::stream(s, indent + "  ", v.num_demos);
    s << indent << "num_frames: ";
    Printer<int8_t>::stream(s, indent + "  ", v.num_frames);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_PRIMITIVES_MESSAGE_TPHSMMTRAINMSG_H
