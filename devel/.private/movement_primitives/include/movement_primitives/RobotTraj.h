// Generated by gencpp from file movement_primitives/RobotTraj.msg
// DO NOT EDIT!


#ifndef MOVEMENT_PRIMITIVES_MESSAGE_ROBOTTRAJ_H
#define MOVEMENT_PRIMITIVES_MESSAGE_ROBOTTRAJ_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_primitives
{
template <class ContainerAllocator>
struct RobotTraj_
{
  typedef RobotTraj_<ContainerAllocator> Type;

  RobotTraj_()
    : robot_dofs(0)
    , traj()  {
    }
  RobotTraj_(const ContainerAllocator& _alloc)
    : robot_dofs(0)
    , traj(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _robot_dofs_type;
  _robot_dofs_type robot_dofs;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _traj_type;
  _traj_type traj;





  typedef boost::shared_ptr< ::movement_primitives::RobotTraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_primitives::RobotTraj_<ContainerAllocator> const> ConstPtr;

}; // struct RobotTraj_

typedef ::movement_primitives::RobotTraj_<std::allocator<void> > RobotTraj;

typedef boost::shared_ptr< ::movement_primitives::RobotTraj > RobotTrajPtr;
typedef boost::shared_ptr< ::movement_primitives::RobotTraj const> RobotTrajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_primitives::RobotTraj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_primitives::RobotTraj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_primitives::RobotTraj_<ContainerAllocator1> & lhs, const ::movement_primitives::RobotTraj_<ContainerAllocator2> & rhs)
{
  return lhs.robot_dofs == rhs.robot_dofs &&
    lhs.traj == rhs.traj;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_primitives::RobotTraj_<ContainerAllocator1> & lhs, const ::movement_primitives::RobotTraj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_primitives

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_primitives::RobotTraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_primitives::RobotTraj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_primitives::RobotTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_primitives::RobotTraj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_primitives::RobotTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_primitives::RobotTraj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_primitives::RobotTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a5c2376d2b17933b7131c7de868f64e";
  }

  static const char* value(const ::movement_primitives::RobotTraj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a5c2376d2b17933ULL;
  static const uint64_t static_value2 = 0xb7131c7de868f64eULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_primitives::RobotTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_primitives/RobotTraj";
  }

  static const char* value(const ::movement_primitives::RobotTraj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_primitives::RobotTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 robot_dofs\n"
"float32[] traj  \n"
;
  }

  static const char* value(const ::movement_primitives::RobotTraj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_primitives::RobotTraj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_dofs);
      stream.next(m.traj);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotTraj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_primitives::RobotTraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_primitives::RobotTraj_<ContainerAllocator>& v)
  {
    s << indent << "robot_dofs: ";
    Printer<int8_t>::stream(s, indent + "  ", v.robot_dofs);
    s << indent << "traj[]" << std::endl;
    for (size_t i = 0; i < v.traj.size(); ++i)
    {
      s << indent << "  traj[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.traj[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_PRIMITIVES_MESSAGE_ROBOTTRAJ_H
